
'''

#1ºPARTE - FUNÇÕES

def apresentacao():
    print("PROGRAMA PARA RESOLVER SISTEMAS DE EQUAÇÕES LINEARES")
    print("(digite 'quit' para parar)\n")


def carregaArquivo(nomeArq):
    arq = open(nomeArq, "r")
    qtdLins = int(arq.readline())

    ret = []
    for lin in range(qtdLins):
        texto = arq.readline().split()

        linha = []
        for col in range(qtdLins + 1):
            linha.append(float(texto[col]))

        ret.append(linha)

    arq.close()
    return ret


def lerMatriz(solicitacao, mensagem, msgDeAdeus):
    digitouDireito = False
    while not digitouDireito:
        digitacao = input(solicitacao + " ('QUIT' para sair)? ").lower()

        if digitacao == "quit":
            print(msgDeAdeus)
            exit()
        else:
            try:
                lerArquivo = carregaArquivo(digitacao)
                digitouDireito = True
            except:
                print(mensagem + " Tente novamente...\n")

    return lerArquivo


def divisao(a, b): #função auxiliar(operacional) a ver se o resultado da divisão de uma linha com a outra é igual
    if a == 0 and b == 0:
        return "indeterminado"
    elif b == 0:
        return "infinito"
    else:
        return a / b


def divDumVetorPorOutro(x, y): #função que realmente testa se está divindo as linhas, verifica se os números são iguais
    ret = []
    for i in range(len(x) - 1):
        ret.append(divisao(x[i], y[i]))
    return ret



def combinacoesDeLinhas2a2(m):
  ret = []
  for lin in range(len(m)):
      for col in range(lin + 1, len(m)):
          ret.append([lin, col])
  return ret


def verificaSeElementosSaoIguais(resultado):
  primeiroElemento = resultadoDivisao
  saoTodosIguais = True
  for elemento in resultadoDivisao:
    if primeiroElemento != elemento:
      saoTodosIguais = False
      break

  return saoTodosIguais 

  
# função auxiliar  recursivo que, de fato, gera as permutacoes
# NÃO USE DIRETAMENTE ESTA FUNÇÃO; USE A FUNÇÃO permutacoes
# recebe uma lista com os valores a serem permutados (linha),
# uma lista com os itens na permutação sendo gerada (perm) e
# uma lista com as permutações geradas (perms)
def permuta(linha, perm, perms):
    if linha == []:
        perms.append(perm)
    else:
        for lin in range(len(linha)):
            permuta(linha[0:lin] + linha[lin + 1:len(linha)],
                    perm + [linha[lin]], perms)
          

# função principal para gerar permutações;
# USA A FUNÇÃO permuta, QUE NÃO DEVE SER USADA DIRETAMENTE;
# recebe uma lista com os valores a serem permutados (linha)
# retorna as permutações geradas
def permutacoes(linha):
    perms = []
    permuta(linha, [], perms)
    return perms


def haZeroNaDiagonal(m, ordL, ordC):
    qtdDeZeros = 0
    posicao = 0
    while posicao < len(m):
        if m[ordL[posicao]][ordC[posicao]] == 0: qtdDeZeros += 1
        posicao += 1
    return qtdDeZeros > 0


def livrarDeZerosNaDiagonal(m):
    perms = permutacoes(list(range(len(m))))

    for i in range(len(perms)):
        for j in range(len(perms)):
            if not haZeroNaDiagonal(m, perms[i], perms[j]):
                return perms[j]

    return None

def poeUmNaDiagonalPrincipalNaLinha(lin, m):
    divisor = m[lin][lin]
    col = 0
    while col < len(m[0]):
        m[lin][col] /= divisor
        col += 1
    return m

def zeroBaixo(lin, col, m):
    linhaSalvada = lin
    lin += 1 
    for lin in range (lin,len(matriz)):
      multiplicador = -m[lin][col]
      for c in range(len(m[0])):
          subtracao = multiplicador * m[linhaSalvada][c]
          m[lin][c] += subtracao
      lin += 1
    return m
          
def zeroCima(lin, col, m):
    for l in range(lin):
        multiplicador = -m[l][col]
        for c in range(len(m[0])):
            subtracao = multiplicador * m[lin][c]
            m[l][c] += subtracao
    return m


def alteraOrdemMatriz(matriz, novaOrdem):
  novaMatriz = []
  for lin in range(len(matriz)):
    novaMatriz.append(matriz[novaOrdem[lin]])

  return novaMatriz

  
#2º PARTE

if __name__ == "__main__":
    apresentacao()
    matriz = [[0, 3, 2, 28], [4, 0, 2, 24], [2, 3, 0 ,16]]
#lerMatriz("Digite o nome do arquivo (ex:arquivo.txt):","Não encontrei o arquivo!","OBRIGADO POR UTILIZAR O NOSSO PROGRAMA!")
  
    combinacoes = combinacoesDeLinhas2a2(matriz)
    
    for lin in range(len(combinacoes)):
      for col in range(len(combinacoes[lin]) - 1):
        resultadoDivisao = divDumVetorPorOutro(matriz[combinacoes[lin][col]], matriz[combinacoes[lin][col + 1]])
        saoTodosIguais = verificaSeElementosSaoIguais(resultadoDivisao)
        if saoTodosIguais is True: #VERIFICAÇÃO SE TODOS OS NÚMEROS SÃO IGUAIS
          print("\nNúmeros são iguais, não é possível resolver este sistema de equações!")
          exit()
    
    novaOrdem = livrarDeZerosNaDiagonal(matriz)
    
    
    if novaOrdem is None:
      print("\nNão é possível eliminar os zeros na diagonal, não é possível resolver este sistema de equações!")
      exit()
      

    matriz = alteraOrdemMatriz(matriz, novaOrdem)
  
        
    for lin in range(len(matriz)): 
      matriz = poeUmNaDiagonalPrincipalNaLinha(lin, matriz)
      matriz = zeroBaixo(lin, lin, matriz)
      matriz = zeroCima(lin, lin, matriz)
      
for i in range(len(matriz)):
  print()
  for j in range(len(matriz[lin])):
    print(f"{matriz[i][j]:2}",end='   ')
